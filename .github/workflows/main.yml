name: workflow

on:
    push:
        branches:
            - main
        paths-ignore:
            - "README.md"

jobs:
    integration:
        name: Continuous Integration
        runs-on: ubuntu-latest

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3

            - name: Lint code
              run: echo "Linting repository"

            - name: Run unit tests
              run: echo "Running unit tests"
    
    build-and-push-ecr-image:
        name: Continuous Delivery
        needs: integration
        runs-on: ubuntu-latest
        
        steps:
            - name: Checkout Code
              uses: actions/checkout@v3
            
            - name: Install Utilities
              run: |
                sudo apt-get update
                sudo apt-get install -y jq unzip

            - name: Configure AWS credentials
              uses: aws-action/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1
            
            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry}}
                ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME}}
                IMAGE_TAG: latest
              run: |
                # Build a docker container and 
                # push it to ECR so that it can
                # be deployed to ECS.

                docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

            
    # Third Job: Continuous Deployment
    Continuous-Deployment:
        needs: build-and-push-ecr-image  # Ensures deployment happens after ECR image build
        runs-on: self-hosted  # Runs on a self-hosted runner (instead of GitHub-hosted)

        steps:
            - name: Checkout Code
              uses: actions/checkout@v3  # Fetch the latest repository code
            
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Secure AWS access
                aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ secrets.AWS_REGION }}

            - name: Pull Latest Docker Image from Amazon ECR
              run: |
                docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

            - name: Stop and Remove Existing Container (if running)
              run: |
                # Check if the container is running and stop it before redeploying
                if [ "$(docker ps -q -f name=networksecurity06)" ]; then
                    echo "Stopping and removing existing container..."
                    docker stop networksecurity06
                    docker rm -fv networksecurity06
                else
                    echo "No existing container found. Proceeding with deployment."
                fi

            - name: Run Docker Container to Serve Users
              run: |
                docker run -d \
                -p 8080:8080 \  # Map port 8080 of the container to the host
                --ipc="host" \
                --name=networksecurity06 \  # Corrected container name
                -e "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" \
                -e "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                -e "AWS_REGION=${{ secrets.AWS_REGION }}" \
                ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

            - name: Clean Up Old Docker Images and Containers
              run: |
                # Remove unused Docker images & stopped containers to free up space
                docker system prune -f

        